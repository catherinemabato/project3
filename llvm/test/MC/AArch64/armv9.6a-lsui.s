# NOTE: Assertions have been autogenerated by utils/update_mca_test_checks.py
// RUN: llvm-mc -triple aarch64 -mattr=+lsui -show-encoding %s  | FileCheck %s

_func:
//------------------------------------------------------------------------------
// Unprivileged load/store operations
//------------------------------------------------------------------------------
  ldtxr       x9, [sp]
  ldtxr       x9, [sp, #0]
  ldtxr       x10, [x11]
  ldtxr       x10, [x11, #0]

  ldatxr      x9, [sp]
  ldatxr      x10, [x11]

  sttxr       wzr, w4, [sp]
  sttxr       wzr, w4, [sp, #0]
  sttxr       w5, x6, [x7]
  sttxr       w5, x6, [x7, #0]

  stltxr      w2, w4, [sp]
  stltxr      w5, x6, [x7]

//------------------------------------------------------------------------------
// Unprivileged load/store register pair (offset)
//------------------------------------------------------------------------------

  ldtp       x21, x29, [x2, #504]
  ldtp       x22, x23, [x3, #-512]
  ldtp       x24, x25, [x4, #8]

  sttp       x3, x5, [sp], #16
  sttp       x3, x5, [sp, #8]!

  sttp       q3, q5, [sp]
  sttp       q17, q19, [sp, #1008]

//------------------------------------------------------------------------------
// Load/store register pair (post-indexed)
//------------------------------------------------------------------------------

  ldtp       x21, x29, [x2], #504
  ldtp       x22, x23, [x3], #-512
  ldtp       x24, x25, [x4], #8

  sttp       q3, q5, [sp], #0
  sttp       q17, q19, [sp], #1008
  ldtp       q23, q29, [x1], #-1024

//------------------------------------------------------------------------------
// Load/store register pair (pre-indexed)
//------------------------------------------------------------------------------
  ldtp       x21, x29, [x2, #504]!
  ldtp       x22, x23, [x3, #-512]!
  ldtp       x24, x25, [x4, #8]!

  sttp       q3, q5, [sp, #0]!
  sttp       q17, q19, [sp, #1008]!
  ldtp       q23, q29, [x1, #-1024]!

//------------------------------------------------------------------------------
// CAS(P)T instructions
//------------------------------------------------------------------------------
  //64 bits
  cast       x0, x1, [x2]
  cast       x0, x1, [sp, #0]
  casat      x0, x1, [x2]
  casat      x0, x1, [sp, #0]
  casalt     x0, x1, [x2]
  casalt     x0, x1, [sp, #0]
  caslt      x0, x1, [x2]
  caslt      x0, x1, [sp, #0]

  //CASP instruction
  caspt      x0, x1, x2, x3, [x4]
  caspt      x0, x1, x2, x3, [sp, #0]
  caspat     x0, x1, x2, x3, [x4]
  caspat     x0, x1, x2, x3, [sp, #0]
  casplt     x0, x1, x2, x3, [x4]
  casplt     x0, x1, x2, x3, [sp, #0]
  caspalt    x0, x1, x2, x3, [x4]
  caspalt    x0, x1, x2, x3, [sp, #0]

//------------------------------------------------------------------------------
// SWP(A|L)T instructions
//------------------------------------------------------------------------------
  swpt       w7, wzr, [x5]
  swpt       x9, xzr, [sp]

  swpta      w7, wzr, [x5]
  swpta      x9, xzr, [sp]

  swptl      w7, wzr, [x5]
  swptl      x9, xzr, [sp]

  swptal     w7, wzr, [x5]
  swptal     x9, xzr, [sp]

//------------------------------------------------------------------------------
// LD{ADD|CLR|SET)(A|L|AL)T instructions
//------------------------------------------------------------------------------

  ldtadd     w7, wzr, [x5]
  ldtadd     x9, xzr, [sp]

  ldtadda    w7, wzr, [x5]
  ldtadda    x9, xzr, [sp]

  ldtaddl    w7, wzr, [x5]
  ldtaddl    x9, xzr, [sp]

  ldtaddal   w7, wzr, [x5]
  ldtaddal   x9, xzr, [sp]

  ldtclr     w7, wzr, [x5]
  ldtclr     x9, xzr, [sp]

  ldtclrl    w7, wzr, [x5]
  ldtclrl    x9, xzr, [sp]

  ldtclra    w7, wzr, [x5]
  ldtclra    x9, xzr, [sp]

  ldtclral   w7, wzr, [x5]
  ldtclral   x9, xzr, [sp]

  ldtset     w7, wzr, [x5]
  ldtset     x9, xzr, [sp]

  ldtsetl    w7, wzr, [x5]
  ldtsetl    x9, xzr, [sp]

  ldtseta    w7, wzr, [x5]
  ldtseta    x9, xzr, [sp]

  ldtsetal   w7, wzr, [x5]
  ldtsetal   x9, xzr, [sp]

//------------------------------------------------------------------------------
// ST{ADD|CLR|SET)(A|L|AL)T instructions
//------------------------------------------------------------------------------

  sttadd     w0, [x2]
  sttadd     w2, [sp]
  sttadd     x0, [x2]
  sttadd     x2, [sp]

  sttaddl    w0, [x2]
  sttaddl    w2, [sp]
  sttaddl    x0, [x2]
  sttaddl    x2, [sp]

  sttadda    w0, [x2]
  sttadda    w2, [sp]
  sttadda    x0, [x2]
  sttadda    x2, [sp]

  sttaddal   w0, [x2]
  sttaddal   w2, [sp]
  sttaddal   x0, [x2]
  sttaddal   x2, [sp]

  sttclr     w0, [x2]
  sttclr     w2, [sp]
  sttclr     x0, [x2]
  sttclr     x2, [sp]

  sttclra    w0, [x2]
  sttclra    w2, [sp]
  sttclra    x0, [x2]
  sttclra    x2, [sp]

  sttclrl    w0, [x2]
  sttclrl    w2, [sp]
  sttclrl    x0, [x2]
  sttclrl    x2, [sp]

  sttclral   w0, [x2]
  sttclral   x2, [sp]
  sttclral   x0, [x2]
  sttclral   x2, [sp]

  sttset     w0, [x2]
  sttset     w2, [sp]
  sttset     x0, [x2]
  sttset     x2, [sp]

  sttseta    w0, [x2]
  sttseta    w2, [sp]
  sttseta    x0, [x2]
  sttseta    x2, [sp]

  sttsetl    w0, [x2]
  sttsetl    w2, [sp]
  sttsetl    x0, [x2]
  sttsetl    x2, [sp]

  sttsetal   w0, [x2]
  sttsetal   x2, [sp]
  sttsetal   x0, [x2]
  sttsetal   x2, [sp]

//------------------------------------------------------------------------------
// Load/store non-temporal register pair (offset)
//------------------------------------------------------------------------------
  ldtnp      x21, x29, [x2, #504]
  ldtnp      x22, x23, [x3, #-512]
  ldtnp      x24, x25, [x4, #8]
  ldtnp      q23, q29, [x1, #-1024]

  sttnp      x3, x5, [sp]
  sttnp      x17, x19, [sp, #64]
  sttnp      q3, q5, [sp]
  sttnp      q17, q19, [sp, #1008]

# CHECK:      	.text

# CHECK:      _func:
# CHECK-NEXT: 	ldtxr	x9, [sp]                        // encoding: [0xe9,0x7f,0x5f,0xc9]
# CHECK-NEXT: 	ldtxr	x9, [sp]                        // encoding: [0xe9,0x7f,0x5f,0xc9]
# CHECK-NEXT: 	ldtxr	x10, [x11]                      // encoding: [0x6a,0x7d,0x5f,0xc9]
# CHECK-NEXT: 	ldtxr	x10, [x11]                      // encoding: [0x6a,0x7d,0x5f,0xc9]

# CHECK:      	ldatxr	x9, [sp]                        // encoding: [0xe9,0xff,0x5f,0xc9]
# CHECK-NEXT: 	ldatxr	x10, [x11]                      // encoding: [0x6a,0xfd,0x5f,0xc9]

# CHECK:      	sttxr	wzr, w4, [sp]                   // encoding: [0xe4,0x7f,0x1f,0x89]
# CHECK-NEXT: 	sttxr	wzr, w4, [sp]                   // encoding: [0xe4,0x7f,0x1f,0x89]
# CHECK-NEXT: 	sttxr	w5, x6, [x7]                    // encoding: [0xe6,0x7c,0x05,0xc9]
# CHECK-NEXT: 	sttxr	w5, x6, [x7]                    // encoding: [0xe6,0x7c,0x05,0xc9]

# CHECK:      	stltxr	w2, w4, [sp]                    // encoding: [0xe4,0xff,0x02,0x89]
# CHECK-NEXT: 	stltxr	w5, x6, [x7]                    // encoding: [0xe6,0xfc,0x05,0xc9]

# CHECK:      	ldtp	x21, x29, [x2, #504]            // encoding: [0x55,0xf4,0x5f,0xe9]
# CHECK-NEXT: 	ldtp	x22, x23, [x3, #-512]           // encoding: [0x76,0x5c,0x60,0xe9]
# CHECK-NEXT: 	ldtp	x24, x25, [x4, #8]              // encoding: [0x98,0xe4,0x40,0xe9]

# CHECK:      	sttp	x3, x5, [sp], #16               // encoding: [0xe3,0x17,0x81,0xe8]
# CHECK-NEXT: 	sttp	x3, x5, [sp, #8]!               // encoding: [0xe3,0x97,0x80,0xe9]

# CHECK:      	sttp	q3, q5, [sp]                    // encoding: [0xe3,0x17,0x00,0xed]
# CHECK-NEXT: 	sttp	q17, q19, [sp, #1008]           // encoding: [0xf1,0xcf,0x1f,0xed]

# CHECK:      	ldtp	x21, x29, [x2], #504            // encoding: [0x55,0xf4,0xdf,0xe8]
# CHECK-NEXT: 	ldtp	x22, x23, [x3], #-512           // encoding: [0x76,0x5c,0xe0,0xe8]
# CHECK-NEXT: 	ldtp	x24, x25, [x4], #8              // encoding: [0x98,0xe4,0xc0,0xe8]

# CHECK:      	sttp	q3, q5, [sp], #0                // encoding: [0xe3,0x17,0x80,0xec]
# CHECK-NEXT: 	sttp	q17, q19, [sp], #1008           // encoding: [0xf1,0xcf,0x9f,0xec]
# CHECK-NEXT: 	ldtp	q23, q29, [x1], #-1024          // encoding: [0x37,0x74,0xe0,0xec]

# CHECK:      	ldtp	x21, x29, [x2, #504]!           // encoding: [0x55,0xf4,0xdf,0xe9]
# CHECK-NEXT: 	ldtp	x22, x23, [x3, #-512]!          // encoding: [0x76,0x5c,0xe0,0xe9]
# CHECK-NEXT: 	ldtp	x24, x25, [x4, #8]!             // encoding: [0x98,0xe4,0xc0,0xe9]

# CHECK:      	sttp	q3, q5, [sp, #0]!               // encoding: [0xe3,0x17,0x80,0xed]
# CHECK-NEXT: 	sttp	q17, q19, [sp, #1008]!          // encoding: [0xf1,0xcf,0x9f,0xed]
# CHECK-NEXT: 	ldtp	q23, q29, [x1, #-1024]!         // encoding: [0x37,0x74,0xe0,0xed]

# CHECK:      	cast	x0, x1, [x2]                    // encoding: [0x41,0x7c,0x80,0xc9]
# CHECK-NEXT: 	cast	x0, x1, [sp]                    // encoding: [0xe1,0x7f,0x80,0xc9]
# CHECK-NEXT: 	casat	x0, x1, [x2]                    // encoding: [0x41,0x7c,0xc0,0xc9]
# CHECK-NEXT: 	casat	x0, x1, [sp]                    // encoding: [0xe1,0x7f,0xc0,0xc9]
# CHECK-NEXT: 	casalt	x0, x1, [x2]                    // encoding: [0x41,0xfc,0xc0,0xc9]
# CHECK-NEXT: 	casalt	x0, x1, [sp]                    // encoding: [0xe1,0xff,0xc0,0xc9]
# CHECK-NEXT: 	caslt	x0, x1, [x2]                    // encoding: [0x41,0xfc,0x80,0xc9]
# CHECK-NEXT: 	caslt	x0, x1, [sp]                    // encoding: [0xe1,0xff,0x80,0xc9]

# CHECK:      	caspt	x0, x1, x2, x3, [x4]            // encoding: [0x82,0x7c,0x80,0x49]
# CHECK-NEXT: 	caspt	x0, x1, x2, x3, [sp]            // encoding: [0xe2,0x7f,0x80,0x49]
# CHECK-NEXT: 	caspat	x0, x1, x2, x3, [x4]            // encoding: [0x82,0x7c,0xc0,0x49]
# CHECK-NEXT: 	caspat	x0, x1, x2, x3, [sp]            // encoding: [0xe2,0x7f,0xc0,0x49]
# CHECK-NEXT: 	casplt	x0, x1, x2, x3, [x4]            // encoding: [0x82,0xfc,0x80,0x49]
# CHECK-NEXT: 	casplt	x0, x1, x2, x3, [sp]            // encoding: [0xe2,0xff,0x80,0x49]
# CHECK-NEXT: 	caspalt	x0, x1, x2, x3, [x4]            // encoding: [0x82,0xfc,0xc0,0x49]
# CHECK-NEXT: 	caspalt	x0, x1, x2, x3, [sp]            // encoding: [0xe2,0xff,0xc0,0x49]

# CHECK:      	swpt	w7, wzr, [x5]                   // encoding: [0xbf,0x84,0x27,0x19]
# CHECK-NEXT: 	swpt	x9, xzr, [sp]                   // encoding: [0xff,0x87,0x29,0x59]

# CHECK:      	swpta	w7, wzr, [x5]                   // encoding: [0xbf,0x84,0xa7,0x19]
# CHECK-NEXT: 	swpta	x9, xzr, [sp]                   // encoding: [0xff,0x87,0xa9,0x59]

# CHECK:      	swptl	w7, wzr, [x5]                   // encoding: [0xbf,0x84,0x67,0x19]
# CHECK-NEXT: 	swptl	x9, xzr, [sp]                   // encoding: [0xff,0x87,0x69,0x59]

# CHECK:      	swptal	w7, wzr, [x5]                   // encoding: [0xbf,0x84,0xe7,0x19]
# CHECK-NEXT: 	swptal	x9, xzr, [sp]                   // encoding: [0xff,0x87,0xe9,0x59]

# CHECK:      	ldtadd	w7, wzr, [x5]                   // encoding: [0xbf,0x04,0x27,0x19]
# CHECK-NEXT: 	ldtadd	x9, xzr, [sp]                   // encoding: [0xff,0x07,0x29,0x59]

# CHECK:      	ldtadda	w7, wzr, [x5]                   // encoding: [0xbf,0x04,0xa7,0x19]
# CHECK-NEXT: 	ldtadda	x9, xzr, [sp]                   // encoding: [0xff,0x07,0xa9,0x59]

# CHECK:      	ldtaddl	w7, wzr, [x5]                   // encoding: [0xbf,0x04,0x67,0x19]
# CHECK-NEXT: 	ldtaddl	x9, xzr, [sp]                   // encoding: [0xff,0x07,0x69,0x59]

# CHECK:      	ldtaddal	w7, wzr, [x5]                   // encoding: [0xbf,0x04,0xe7,0x19]
# CHECK-NEXT: 	ldtaddal	x9, xzr, [sp]                   // encoding: [0xff,0x07,0xe9,0x59]

# CHECK:      	ldtclr	w7, wzr, [x5]                   // encoding: [0xbf,0x14,0x27,0x19]
# CHECK-NEXT: 	ldtclr	x9, xzr, [sp]                   // encoding: [0xff,0x17,0x29,0x59]

# CHECK:      	ldtclrl	w7, wzr, [x5]                   // encoding: [0xbf,0x14,0x67,0x19]
# CHECK-NEXT: 	ldtclrl	x9, xzr, [sp]                   // encoding: [0xff,0x17,0x69,0x59]

# CHECK:      	ldtclra	w7, wzr, [x5]                   // encoding: [0xbf,0x14,0xa7,0x19]
# CHECK-NEXT: 	ldtclra	x9, xzr, [sp]                   // encoding: [0xff,0x17,0xa9,0x59]

# CHECK:      	ldtclral	w7, wzr, [x5]                   // encoding: [0xbf,0x14,0xe7,0x19]
# CHECK-NEXT: 	ldtclral	x9, xzr, [sp]                   // encoding: [0xff,0x17,0xe9,0x59]

# CHECK:      	ldtset	w7, wzr, [x5]                   // encoding: [0xbf,0x34,0x27,0x19]
# CHECK-NEXT: 	ldtset	x9, xzr, [sp]                   // encoding: [0xff,0x37,0x29,0x59]

# CHECK:      	ldtsetl	w7, wzr, [x5]                   // encoding: [0xbf,0x34,0x67,0x19]
# CHECK-NEXT: 	ldtsetl	x9, xzr, [sp]                   // encoding: [0xff,0x37,0x69,0x59]

# CHECK:      	ldtseta	w7, wzr, [x5]                   // encoding: [0xbf,0x34,0xa7,0x19]
# CHECK-NEXT: 	ldtseta	x9, xzr, [sp]                   // encoding: [0xff,0x37,0xa9,0x59]

# CHECK:      	ldtsetal	w7, wzr, [x5]                   // encoding: [0xbf,0x34,0xe7,0x19]
# CHECK-NEXT: 	ldtsetal	x9, xzr, [sp]                   // encoding: [0xff,0x37,0xe9,0x59]

# CHECK:      	ldtadd	w0, wzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x19]
# CHECK-NEXT: 	ldtadd	w2, wzr, [sp]                   // encoding: [0xff,0x07,0x22,0x19]
# CHECK-NEXT: 	ldtadd	x0, xzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x59]
# CHECK-NEXT: 	ldtadd	x2, xzr, [sp]                   // encoding: [0xff,0x07,0x22,0x59]

# CHECK:      	ldtadd	w0, wzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x19]
# CHECK-NEXT: 	ldtadd	w2, wzr, [sp]                   // encoding: [0xff,0x07,0x22,0x19]
# CHECK-NEXT: 	ldtadd	x0, xzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x59]
# CHECK-NEXT: 	ldtadd	x2, xzr, [sp]                   // encoding: [0xff,0x07,0x22,0x59]

# CHECK:      	ldtadd	w0, wzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x19]
# CHECK-NEXT: 	ldtadd	w2, wzr, [sp]                   // encoding: [0xff,0x07,0x22,0x19]
# CHECK-NEXT: 	ldtadd	x0, xzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x59]
# CHECK-NEXT: 	ldtadd	x2, xzr, [sp]                   // encoding: [0xff,0x07,0x22,0x59]

# CHECK:      	ldtadd	w0, wzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x19]
# CHECK-NEXT: 	ldtadd	w2, wzr, [sp]                   // encoding: [0xff,0x07,0x22,0x19]
# CHECK-NEXT: 	ldtadd	x0, xzr, [x2]                   // encoding: [0x5f,0x04,0x20,0x59]
# CHECK-NEXT: 	ldtadd	x2, xzr, [sp]                   // encoding: [0xff,0x07,0x22,0x59]

# CHECK:      	ldtclr	w0, wzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x19]
# CHECK-NEXT: 	ldtclr	w2, wzr, [sp]                   // encoding: [0xff,0x17,0x22,0x19]
# CHECK-NEXT: 	ldtclr	x0, xzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x59]
# CHECK-NEXT: 	ldtclr	x2, xzr, [sp]                   // encoding: [0xff,0x17,0x22,0x59]

# CHECK:      	ldtclr	w0, wzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x19]
# CHECK-NEXT: 	ldtclr	w2, wzr, [sp]                   // encoding: [0xff,0x17,0x22,0x19]
# CHECK-NEXT: 	ldtclr	x0, xzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x59]
# CHECK-NEXT: 	ldtclr	x2, xzr, [sp]                   // encoding: [0xff,0x17,0x22,0x59]

# CHECK:      	ldtclr	w0, wzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x19]
# CHECK-NEXT: 	ldtclr	w2, wzr, [sp]                   // encoding: [0xff,0x17,0x22,0x19]
# CHECK-NEXT: 	ldtclr	x0, xzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x59]
# CHECK-NEXT: 	ldtclr	x2, xzr, [sp]                   // encoding: [0xff,0x17,0x22,0x59]

# CHECK:      	ldtclr	w0, wzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x19]
# CHECK-NEXT: 	ldtclr	x2, xzr, [sp]                   // encoding: [0xff,0x17,0x22,0x59]
# CHECK-NEXT: 	ldtclr	x0, xzr, [x2]                   // encoding: [0x5f,0x14,0x20,0x59]
# CHECK-NEXT: 	ldtclr	x2, xzr, [sp]                   // encoding: [0xff,0x17,0x22,0x59]

# CHECK:      	ldtset	w0, wzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x19]
# CHECK-NEXT: 	ldtset	w2, wzr, [sp]                   // encoding: [0xff,0x37,0x22,0x19]
# CHECK-NEXT: 	ldtset	x0, xzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x59]
# CHECK-NEXT: 	ldtset	x2, xzr, [sp]                   // encoding: [0xff,0x37,0x22,0x59]

# CHECK:      	ldtset	w0, wzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x19]
# CHECK-NEXT: 	ldtset	w2, wzr, [sp]                   // encoding: [0xff,0x37,0x22,0x19]
# CHECK-NEXT: 	ldtset	x0, xzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x59]
# CHECK-NEXT: 	ldtset	x2, xzr, [sp]                   // encoding: [0xff,0x37,0x22,0x59]

# CHECK:      	ldtset	w0, wzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x19]
# CHECK-NEXT: 	ldtset	w2, wzr, [sp]                   // encoding: [0xff,0x37,0x22,0x19]
# CHECK-NEXT: 	ldtset	x0, xzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x59]
# CHECK-NEXT: 	ldtset	x2, xzr, [sp]                   // encoding: [0xff,0x37,0x22,0x59]

# CHECK:      	ldtset	w0, wzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x19]
# CHECK-NEXT: 	ldtset	x2, xzr, [sp]                   // encoding: [0xff,0x37,0x22,0x59]
# CHECK-NEXT: 	ldtset	x0, xzr, [x2]                   // encoding: [0x5f,0x34,0x20,0x59]
# CHECK-NEXT: 	ldtset	x2, xzr, [sp]                   // encoding: [0xff,0x37,0x22,0x59]

# CHECK:      	ldtnp	x21, x29, [x2, #504]            // encoding: [0x55,0xf4,0x5f,0xe8]
# CHECK-NEXT: 	ldtnp	x22, x23, [x3, #-512]           // encoding: [0x76,0x5c,0x60,0xe8]
# CHECK-NEXT: 	ldtnp	x24, x25, [x4, #8]              // encoding: [0x98,0xe4,0x40,0xe8]
# CHECK-NEXT: 	ldtnp	q23, q29, [x1, #-1024]          // encoding: [0x37,0x74,0x60,0xec]

# CHECK:      	sttnp	x3, x5, [sp]                    // encoding: [0xe3,0x17,0x00,0xe8]
# CHECK-NEXT: 	sttnp	x17, x19, [sp, #64]             // encoding: [0xf1,0x4f,0x04,0xe8]
# CHECK-NEXT: 	sttnp	q3, q5, [sp]                    // encoding: [0xe3,0x17,0x00,0xec]
# CHECK-NEXT: 	sttnp	q17, q19, [sp, #1008]           // encoding: [0xf1,0xcf,0x1f,0xec]
